devtools::load_all()
?h_fun
devtools::document()
?h_fun
devtools::build()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::build()
devtools::document()
roxygen2::roxygenise()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::load_all()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build()
#' @param l_train_high A vector containing the high-level function approximation at the high-level training points.
#' @param gp_mean A vector containing Gaussian process posterior mean - result of the \code{gp_post()} function.
#' @param gp_cov A matrix containing Gaussian process posterior covariance - result of the \code{gp_post()} function.
#' @param accurate Exact - Accurate approximation of the high-level if available. Default value is \code{NULL}
#' @param train_points_mid A vector containing the training points of the middle-level.
#' Default value is \code{NULL}. Used when using three levels of approximation.
#' @param l_train_mid A vector containing the middle-level function approximation at the middle-level training points.
#' Default value is \code{NULL} Used when using three levels of approximation.
#' @return Plot of the GP posterior distribution.
#' @export
gp_posterior_plot <- function(train_points_low, train_points_high, test_points,
l_train_low, l_train_high, gp_mean, gp_cov, accurate = NULL,
train_points_mid  = NULL, l_train_mid = NULL){
gp_plot <- ggplot2::ggplot()+
ggplot2::geom_line(data = data.frame(test_points, gp_mean),
ggplot2::aes(test_points, gp_mean), color = "red", lwd = 1)+
ggplot2::geom_ribbon(data = data.frame(test_points, y_up = gp_mean + 1.96*sqrt(diag(gp_cov)),
y_low = gp_mean - 1.96*sqrt(diag(gp_cov))),
ggplot2::aes(test_points, ymax = y_up, ymin = y_low), fill = "skyblue", alpha = 0.5)+
ggplot2::geom_point(data = data.frame(train_points_low, l_train_low),
ggplot2::aes(train_points_low, l_train_low), size = 2.5, col = "green")+
ggplot2::geom_point(data = data.frame(train_points_high, l_train_high),
ggplot2::aes(train_points_high, l_train_high), size = 2.5, col = "blue")+
ggplot2::theme_minimal()+
ggplot2::labs(title = "",
subtitle = "",
y = "", x = "x") +
ggplot2::theme(axis.text=element_text(size=14),
axis.title=element_text(size=16))
if (is.null(accurate) == F) {
gp_plot <- gp_plot + ggplot2::geom_line(data = data.frame(test_points, accurate),
ggplot2::aes(test_points, accurate), color = "orange", linetype = "dashed", lwd = 1)
}
if (is.null(train_points_mid) == F) {
gp_plot <- gp_plot + ggplot2::geom_point(data = data.frame(train_points_mid, l_train_mid),
ggplot2::aes(train_points_mid, l_train_mid), size = 2.5, col = "pink")
}
return(gp_plot)
}
devtools::load_all()
rm(list = c("gp_posterior_plot"))
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
rlang::last_trace()
devtools::load_all()
devtools::build()
devtools::load_all()
devtools::build()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build()
